#!/bin/sh
#
# Quick, dirty, lazy shell script to count lines of text in a project.
# It's not intended to be a Ph.D engineered version.
#

echo "Generating code base line count statistics"

cache="code-count.tmp"

wc_l_count() {
    wc -l "$@" | awk '{ print $1 }'
}

count() {
    local where file_type ext names list_of_files line sum count

    where=${1:-.}
    shift
    file_type=$1
    shift
    names="-name \*.$1"
    shift
    for ext; do
        names="$names -o -name \*.$ext"
    done
    list_of_files="$cache/$file_type.files"
    eval "find $where $names" > "$list_of_files"
    if [ ! -f "$list_of_files" ]; then
        # or directory 'cuz it clues the user to what we mean.
        echo "error: $file_type: cached at '$list_of_Files': No such file or directory" >/dev/stderr
    fi

    sum='0'
    while read line; do
        sum="$(expr "$sum" + "$(wc_l_count $line)")"
    done < "$list_of_files"
    [ "$sum" -eq 0 ] && return
    count="$(wc_l_count $list_of_files)"
    [ -z "$suppress" ] && printf "${sum}\tlines of $file_type in $count files.\n"
    [ -s "$list_of_files" ] && echo "$sum $count" >> "${list_of_files}.total"
}


while getopts "s" opt; do
    case "$opt" in
        s)
            suppress=true
            ;;
    esac
done
shift $(expr $OPTIND - 1)


if [ ! -d "$cache" ] && ! mkdir "$cache"; then
    echo "Failed to make cache directory ($cache)."
    exit 1
fi

for dir in ${@:-$PWD}; do
    [ -z "$suppress" ] && echo "Code count in $dir"
    count ${dir} c_and_cpp c h cpp hpp cc hh cxx hxx 
    count ${dir} csharp cs
    count ${dir} elisp elisp
    count ${dir} groovy groovy gradle
    count ${dir} haskell hs lhs
    count ${dir} java java
    count ${dir} javascript js ejs
    count ${dir} lisp lisp
    count ${dir} lua lua
    count ${dir} perl pl pm
    count ${dir} php php
    count ${dir} python py
    count ${dir} ruby rb erb
    count ${dir} scala scala
    count ${dir} scheme scm ss 
    count ${dir} shell sh
    count ${dir} vimscript vim
done

if [ $# -gt 1 ]; then
    echo
    echo "TOTALS FROM: $*"
    echo

    for total in $cache/*.total; do
        sum=$(awk '{ sum += $1 } END { print sum }' "$total")
        count=$(awk '{ count += $1 } END { print count }' "$total")

        printf "${sum}\tlines of $(basename $total | sed -e 's/.files.total$//') in $count files.\n"
    done
fi

rm -rf "$cache"


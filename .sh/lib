# vim: set ft=sh :
#
# This file is designed to be sourced for its functions.
#
# It is assumed to be apart of ~/.sh/* framework and can be sourced accordingly.
#

dump_path() {
    local entry

    for entry in `echo $PATH | sed -e 's/:/ /g'`; do
        echo "$entry"
    done
}

in_path() {
    #
    # usage: in_path [OPTION] WHAT...
    #
    # Searches PATH for WHAT.
    #
    # options: 
    #   
    #   -d = WHAT refers to directories. (Default.)
    #   -b = WHAT refers to programs.
    #
    # exit status:
    #   0	= found
    #   >0	= not found
    # 
    #
    local what bin dir prog option

    OPTIND=1
    while getopts "bedh" option; do
        case "$option" in
            b|e)
                bin=1
                ;;
            d)
                dir=1
                ;;
            h)
                echo "usage: in_path [-b | -d] NAME"
                echo "Check for  binary (-b) or directory (-d) in PATH."
                return
                ;;
            \?)
                # bad option
                return
                ;;
        esac
    done
    shift `expr $OPTIND - 1`

    # default to -d (directory).
    [ -z "$bin" -a -z "$dir" ] && dir=1

    # needle
    for dir_or_bin; do
        # haystacks
        for from_path in `dump_path`; do
            # magnet
            [ -z "$bin" -a -x "${dir}/${bin}" ] && return 0
            [ -z "$dir" -a -d "${dir}" ]        && return 0
        done
    done

    return 127
}

append_path() {
    PATH="$PATH:$1"
}


prepend_path() {
    PATH="$1:$PATH"
}

ensure_path() {
    #
    # usage: ensure_path {path}
    #
    # Ensure that its argument is in path.
    #
    # options: 
    #   -a append (default).
    #   -e only if exists.
    #   -h help message.
    #   -p prepend.
    #
    local newpath aflag eflag pflag option
    OPTIND=1
    while getopts "aehp" option; do
        case "$option" in
            a)
                aflag=1
                ;;
            e)
                eflag=1
                ;;
            h)
                echo "usage: ensure_path [-e] [-a|-p] PATH"
                echo "append (-a) or prepend (-p) PATH, if exists (-e)"
                return
                ;;
            p)
                pflag=1
                ;;
            \?)
                # bad option
                return
                ;;
        esac
    done
    shift `expr $OPTIND - 1`

    for newpath in $@; do

        # default to -a (append).
        [ -z "$pflag" -a -z "$aflag" ] && aflag=1

        # -e => only if exists.
        [ -n "$eflag" -a ! -d "$newpath" ] && continue

        # already in path
        if in_path -d "$newpath"; then
            # echo "$newpath is in PATH"
            continue
        fi


        if [ -n "$aflag" ]; then
            append_path "$newpath"
        elif [ -n "$pflag" ]; then
            prepend_path "$newpath"
        else
            echo "ensure_path: internal error!."
            return 1
        fi
    done

}


fuzzy_ensure_path() {
    #
    # usage: fuzzy_ensure_path [OPTION] BASEPATH...
    #
    # OPTION is the same as ensure_path.
    #
    # Given a BASEPATH like /usr/local/foo:
    #
    #   0. Check if /usr/local/foo/foo (or foo.sh) exists.
    #   2. Check if /usr/local/foo/bin/foo (or foo.sh) exists.
    #   3. Check if /usr/local/foo/(last dir by sort)/foo (or foo.sh) exists.
    #   4. Check if /usr/local/foo/(last dir by sort)/bin/foo (or foo.sh) exists.
    #
    # This is useful for things stored in groups, e.g. if you have a tree like
    #   /usr/local/foo/
    #       1.1
    #       1.2
    #       foo-1.3
    #       e.t.c.
    #
    # TODO:
    #
    #   -d foo,bar,... list of subdirs to check, e.g. -d sbin /usr/local/foo 
    #   -x sh,py,pl,... list of extensions to check, e.g. -x py /usr/local/foo
    #
    local basepath dirname binname trydir trysubdir exts tryext option flags

    OPTIND=1
    while getopts "b:aehp" option; do
        case "$option" in
            b)
                binname="$OPTARG"
                ;;
            h)
                echo "usage: fuzzy_ensure_path [OPTION] BASEPATH"
                return
                ;;
            \?)
                # bad option
                return
                ;;
            *)
                flags="$flags -$option"
                ;;
        esac
    done
    shift `expr $OPTIND - 1`

    for basepath in $@; do
        dirname="`dirname $basepath`"
        binname="${binname:-`basename $basepath`}"
        exts="sh py pl rb" 


        if [ -d "$basepath" ]; then
            for trydir in "${basepath}" "${basepath}/`ls ${basepath} | sort | tail -n 1`"; do
                for trysubdir in "$trydir" "${trydir}/bin"; do
                    if [ -x "${trysubdir}/${binname}" ]; then
                        ensure_path $flags "${trysubdir}"
                        return
                    fi
                    for tryext in $exts; do
                        if [ -x "${trysubdir}/${binname}.${tryext}" ]; then
                            ensure_path $flags "${trysubdir}"
                            return
                        fi
                    done
                done
                # echo "try $trydir/$binname"
                # echo "try $trydir/${binname}.sh"
                # echo "try $trydir/bin/${binname}"
                # echo "try $trydir/bin/${binname}.sh"
            done
        fi
    done
}

find_in_normpath() {
    #
    # Search in the usual paths for the indicated programs. If found print the
    # full path to the program to standard output.
    #
    # params: 
    #   $@  = a list of programs to search for
    #
    # exit status:
    #   0	= found
    #   >0	= not found
    #
    local progname p name

    for progname; do
        for p in "${HOME}/sw/sh.local" "${HOME}/sw/sh" "${HOME}/sw/bin" \
                  "${HOME}/sw/sbin" \
                  /usr/local/bin /usr/local/sbin \
                  /usr/bin /usr/sbin \
                  /bin /sbin
        do
            name="${p}/${progname}"
            if [ -x "$name" ]; then
                echo "$name"
                return 0
            fi
        done
        # echo "not found: $progname"
    done
    return 127
}

get_ruby_version() {
    local p
    
    p="`find_in_normpath ruby`"
    [ -n "$p" ] && "$p" -v | cut -d ' ' -f 2
}

get_ruby_major_version() {
    get_ruby_version | cut -d '.' -f 1-2
}

get_python_version() {
    local p
    
    p="`find_in_normpath python`"
    # groan, python seems to use stderr here.
    [ -n "$p" ] && "$p" -V 2>&1 | cut -d ' ' -f 2
}

get_python_major_version() {
    get_python_version | cut -d '.' -f 1-2
}

get_power_state() {
    case "$OS_NAME" in
        Linux|FreeBSD)
            ${OS_NAME}_get_power_state
            ;;
        *)
            echo "get_power_state: unsupported platform: `uname -o` / OS_NAME=${OS_NAME}"
            return 127
            ;;
    esac
}

set_power_profile() {
    #
    # invokes ~/.sh/power.d/{host name} with any arguments given to us.
    #

    local p

    p="${HOME}/.sh/power.d/`uname -n`"

    if [ -x "$p" ]; then
        "$p" "$*" 
    else
        echo "set_power_profile: no power profile available!" > /dev/stderr
        return 1
    fi
}



# Load OS specific library code if present.
#
    if [ -n "$OS_NAME" -a -f "${HOME}/.sh/lib.d/${OS_NAME}" ]; then
        . "${HOME}/.sh/lib.d/${OS_NAME}"
    fi


#!/bin/sh
#
# Quick, dirty, lazy shell script to count lines of text in a project.
# It's not intended to be a Ph.D engineered version.
#

echo "Generating code base line count statistics"

cache="code-count.tmp"

wc_l_count() {
    wc -l "$@" | awk '{ print $1 }'
}

count() {
    local where file_type ext names list_of_files line sum count

    where=${1:-.}
    shift
    file_type=$1
    shift
    names="-name \*.$1"
    shift
    for ext; do
        names="$names -o -name \*.$ext"
    done
    list_of_files="$cache/$file_type.files"
    eval "find $where $names" > "$list_of_files"
    if [ ! -f "$list_of_files" ]; then
        # or directory 'cuz it clues the user to what we mean.
        echo "error: $file_type: cached at '$list_of_Files': No such file or directory" >/dev/stderr
    fi

    sum='0'
    while read line; do
        sum="$(expr "$sum" + "$(wc_l_count $line)")"
    done < "$list_of_files"
    printf "${sum}\tlines of $file_type in `wc_l_count $list_of_files` files.\n"
}

if [ ! -d "$cache" ] && ! mkdir "$cache"; then
    echo "Failed to make cache directory ($cache)."
    exit 1
fi

count ${1:-$PWD} c_and_cpp c h cpp hpp cc hh cxx hxx 
count ${1:-$PWD} csharp cs
count ${1:-$PWD} elisp elisp
count ${1:-$PWD} groovy groovy gradle
count ${1:-$PWD} haskell hs lhs
count ${1:-$PWD} java java
count ${1:-$PWD} javascript js ejs
count ${1:-$PWD} lisp lisp
count ${1:-$PWD} lua lua
count ${1:-$PWD} perl pl pm
count ${1:-$PWD} php php
count ${1:-$PWD} python py
count ${1:-$PWD} ruby rb erb
count ${1:-$PWD} scala scala
count ${1:-$PWD} scheme scm ss 
count ${1:-$PWD} shell sh
count ${1:-$PWD} vimscript vim

echo "Finished."

# vim: set ft=sh 
#
# General functions that should be fairly portable
#
#

test_dns() {
    #
    # quick test of each name server on unix box.
    #
    for _IP in `cat /etc/resolv.conf | awk '/^nameserver/ { print $2 }'`
    do
        ping -c ${1:-3} "$_IP" | tail -n 1
    done
    unset _IP
}

new_script() {
    #
    # create a new script, with the shebang! pre-inserted.
    #
    # params:
    #  $1   = interp
    #  $2   = filename
    #
    if [ -z "$1" ]; then
        echo "Usage: $0 iterpname scriptname"
        return 0
    fi
    printf "#!/usr/bin/env $1\n\n" >> "$2" && chmod +x "$2"
}

emulate_pushd() {
    DIRSTACK="$1 ${DIRSTACK:-`pwd`}"
    cd $1 && emulate-dirs
}

emulate_popd() {
    [ "$1" = "-n" ] && _n=$1

    set -- $DIRSTACK
    shift
    DIRSTACK="$*"

    # done this way in case of an error with chdir
    if [ -z "$_n" ]; then
        unset _n
        cd $1 && emulate-dirs
    else
        unset _n
        emulate-dirs
    fi
}

emulate_dirs() {

    _args=`getopt clpv $* 2> /dev/null`
    if [ $? -ne 0 ]; then
        # handle wrong options here.
        echo "usage: emulate-dirs [-cplv]"
    fi
    set -- $_args

    for _args do
        case $_args in
           # print with ~'s
           --)  type perl >/dev/null 2>/dev/null
                if [ $? -ne 0 ]; then
                    # perl not found, fall back on dirs -l
                    emulate-dirs -l
                    return
                fi
                echo $DIRSTACK | perl -pe 's%$ENV{HOME}%~%g'
                shift; break
                ;;
           # erase dir stack
           -c)  DIRSTACK=""
                shift; break
                ;;
           # list with ~'s expanded, our normal behavour
           -l)  echo $DIRSTACK
                shift; break
                ;;
           # print on own line
           -p)  for _args in $DIRSTACK
                do
                    echo $_args
                done
                shift; break
                ;;
           # print on own line with indexes and tabulators
           -v)  for _args in $DIRSTACK
                  do
                      printf "%d\t%s\n" "$_i" "$_args"
                      _i=`expr "$_i" + 1`
                  done
                shift; break
                ;;
            # handled above
            *)  echo "$0: Programmer error if you ever see this"
                shift; break
                ;;
        esac
    done
    unset _args _i
}

get_ipaddr() { # TODO this should become .sh/funcs.d/$OS_NAME specific
    #
    # Prints the current machines IP address.
    #
    # params: 
    #   $1  = interface to query
    #   $2  = prefix, default is 'inet'
    #
    #
    
    type ifconfig >/dev/null 2>/dev/null && \
         ifconfig | grep $1 >/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
        ifconfig "$1" | grep "${2:-inet} " | awk '{ print $2 }' | head -n 1
    fi

}

vimhelp() {
    vim -c "help $@ | only"
}

swaptwofiles() {
    mv "$1" "${2}.new" && \
    mv "$2" "${1}" && \
    mv "${2}.new" "$2"
}

swapfiles() {

    type expr >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "$0: error: can't find 'expr' in PATH"
        return 1
    fi

    if [ `expr $# % 2` -ne 0 ]; then
        echo "usage: $0 src1 dst1 [src2 dest2 ...]"
        return 1
    fi

    for null; do
        swaptwofiles $1 $2
        if [ $# -eq 2 ]; then break; fi
        shift 2 >/dev/null 2>&1
    done
    unset null
}


dirsize() {
    # report the disk usage for $@ in human readable format

    du -ch "$@" | tail -n 1 | cut -f 1
}

where() {
    # report where I am

    echo "`whoami`@`uname -n`:`pwd`"
    echo '-----'
    ls -F
}

doneat() {
    # eval its arguments and display the start/done at times bracketing the command

    printf "started at "; date
    eval "$@"
    printf "done at "; date
}

runinscript() {
    if [ $# -eq 0 ]; then
        echo "usage: $0 {command} {logfile}"
        return
    fi

    eval "script -c \"$1\" \"$2\""
}

eval_for_each() {
    # eval it's arguments in a for loop style.
    #
    # $1        = command to run
    # $2..$#    = words for for loop.
    #

    local cmd what

    cmd="$1"
    shift 1
    echo '$1 = '$1' $@ = '"$@"

    for what in $@; do
        eval "$cmd" "$what"
    done
}


#!/bin/sh
#
# Script to configure services/apps during rc.xinit.
# It uses the current network to determine which "Profile" to load
#
# usage: services {start | stop} [profile]
#
# if profile is supplied, network determination is ommitted. This is for a use
# case like 'services stop work && services start', when changing networks.
#
# if profile is ommitted and the first argument is stop, the profile will be
# looked up from the this-profile file. It is used to record the result of this
# stuff.
#
########
# TODO
#   warn if trying to stop != current profile
#   don't clobber NETWORK_PROFILE to non-existing-profile
########



# include some utility functions
#
. "${MY_PROFILE_PATH:-$HOME/.sh}/lib"; maybe_set_default_sh_services_environment


# ensure environment is ok
#
ACTION="$1"
MY_PROFILE="$2"
if ! touch "$THIS_PROFILE"; then
    echo "$0: unable to maintain state via $THIS_PROFILE - aborting!"
    exit 1
fi
case "$ACTION" in
    start|stop)
        ;; 
    *)
        echo "Don't know how to handle $ACTION."
        echo "Maybe run profile $PROFILE $ACTION directly?"
        echo "Stopping."
        exit 1
        ;;
esac




if [ "$ACTION" = "stop" -a -z "$MY_PROFILE" ]
then # operate on current profile
    if [ ! -r "$THIS_PROFILE" ]; then
        echo "$0: error reading $THIS_PROFILE - aborting"
        exit 127
    fi
    MY_PROFILE="`echo_this_profile NETWORK_PROFILE`"
fi

if [ "$ACTION" = "start" -a -z "$MY_PROFILE" ]
then # detect it based on network connection

    case `echo_network_connection` in
        "Auto BSDNet") # home
            MY_NETWORK_NAME="BSDNet"
            ;;
        "Auto wegnet") # work
            MY_NETWORK_NAME="wegnet"
            ;;
        "Auto SpideyMobile") # mobile (phone wifi)
            MY_NETWORK_NAME="mobile"
            ;;
        "Auto usb*") # mobile (currently phone via tether)
            MY_NETWORK_NAME="mobile"
            ;;
        "Auto eth0") # wired, check if wired or home
            if ifconfig eth0 | grep "inet addr:" | \
                grep -E "172\.1[67]\..+\..+" >/dev/null
            then
                MY_NETWORK_NAME="engineering"
            else
                MY_NETWORK_NAME="update $0 for this wired network!"
            fi
            ;;
        *)
            MY_NETWORK_NAME="unknown"
            ;;
    esac

    MY_PROFILE="`echo_network_profile $MY_NETWORK_NAME`"
    write_this_profile NETWORK_NAME "$MY_NETWORK_NAME"
fi




# write information that should be exported to services_d().
#
write_this_profile NETWORK_PROFILE "$MY_PROFILE"

# execute profiles
#
services_d default "$ACTION"
services_d "$MY_PROFILE" "$ACTION"

if [ "$ACTION" = "stop" ]; then # blank it as none is loaded
    write_this_profile NETWORK_PROFILE ""
fi


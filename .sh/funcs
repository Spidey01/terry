# vim: set ft=sh :
#
# General functions that should be fairly portable
#
#

find_in_normpath() {
    #
    # Search in the usual paths for the indicated programs. If found print the
    # full path to the program to standard output, else print a nount found
    # message to standard output.
    #
    # params: 
    #   $@  = a list of programs to search for
    #
    # exit status:
    #   0	= found
    #   >0	= not found
    #
    local P
    local name
    local progname

    for progname; do
        for P in /bin /usr/bin /usr/local/bin "${HOME}/bin" "${HOME}/sh" \
                 /sbin /usr/sbin /usr/local/sbin "${HOME}/sbin"
        do
            name="${P}/${progname}"
            if [ -x "$name" ]; then
                echo "$name"
                continue 2
            fi
        done
        echo "not found: $progname"
    done
    return 127
}

find_in_normpaths() {
    #
    # Search in the usual paths for the indicated programs and set the 
    # indicated variables to that path, as would be suitable for exec.
    #
    # params: 
    #   $@  = a list of 'program VARIABLE' to search for
    #
    # exit status:
    #   0
    #
    local P

    if [ "$#" -eq 0 -o `expr $# % 2` -ne 0 ]; then
        printf "$0 name [variable name variable...]\n"
        return 0
    fi
    while [ "$#" -ne 0 ]; do
        local varname="$1"
        local progname="$2"
        shift 2

        local P="`find_in_normpath $progname`"
        echo "$P" | grep "not found:" >/dev/null 2>/dev/null
        if [ $? -eq 0 ]; then
            echo "unable to set $varname"
        else
            eval ${varname}="$P"
            export ${varname}
        fi
    done

    return 0
}


test_dns() {
    #
    # quick test of each name server on unix box.
    #
    local IP
    for IP in `cat /etc/resolv.conf | awk '/^nameserver/ { print $2 }'`
    do
        ping -c ${1:-3} "$IP" | tail -n 1
    done
}

new_script() {
    #
    # create a new script, with the shebang! pre-inserted.
    #
    # params:
    #  $1   = interp
    #  $2   = filename
    #
    if [ -z "$1" ]; then
        echo "Usage: $0 iterpname scriptname"
        return 0
    fi
    printf "#!/usr/bin/env $1\n\n" >> "$2" && chmod +x "$2"
}

lj_post() {
    #
    # start new live journal post in editor
    #
    # params:
    #  $1   = optional directory
    #
    ${EDITOR} "${1:-/tmp}/lj-$$.post" || echo "$0: error?"
}

cvs_ci() {
    #
    # commit short message (string) to file, after expanding c escapes
    # parms:
    #  $1   = "file:\n\tmessage"
    #
    if [ -z "$1" ]; then
        echo "$0: No commit message specified: aborting"
        exit 1;
    fi

    # XXX some old bourne shells don't support local but those
    # that I know don't, also don't have shell functions either!
    #
    local ECHOCMD=""
    local CVSMSGF=`mktemp -t cvs-ci`

    # some shells built in echo won't expand control char without -e
    #
    printf "$1" > "$CVSMSGF"
    shift; cvs commit -F "$CVSMSGF" "$@"
}



emulate_pushd() {
    DIRSTACK="$1 ${DIRSTACK:-`pwd`}"
    cd $1 && emulate-dirs
}

emulate_popd() {
    local _n
    [ "$1" = "-n" ] && _n=$1

    set -- $DIRSTACK
    shift
    DIRSTACK="$*"

    # done this way in case of an error with chdir
    if [ -z "$_n" ]; then
        cd $1 && emulate-dirs
    else
        emulate-dirs
    fi
}

emulate_dirs() {
    local _args
    local _i=0

    _args=`getopt clpv $* 2> /dev/null`
    if [ $? -ne 0 ]; then
        # handle wrong options here.
        echo "usage: emulate-dirs [-cplv]"
    fi
    set -- $_args

    for _args do
        case $_args in
           # print with ~'s
           --)  type perl >/dev/null 2>/dev/null
                if [ $? -ne 0 ]; then
                    # perl not found, fall back on dirs -l
                    emulate-dirs -l
                    return
                fi
                echo $DIRSTACK | perl -pe 's%$ENV{HOME}%~%g'
                shift; break
                ;;
           # erase dir stack
           -c)  DIRSTACK=""
                shift; break
                ;;
           # list with ~'s expanded, our normal behavour
           -l)  echo $DIRSTACK
                shift; break
                ;;
           # print on own line
           -p)  for _args in $DIRSTACK
                do
                    echo $_args
                done
                shift; break
                ;;
           # print on own line with indexes and tabulators
           -v)  for _args in $DIRSTACK
                  do
                      printf "%d\t%s\n" "$_i" "$_args"
                      _i=`expr "$_i" + 1`
                  done
                shift; break
                ;;
            # handled above
            *)  echo "$0: Programmer error if you ever see this"
                shift; break
                ;;
        esac
    done
}

get_ipaddr() {
    #
    # Prints the current machines IP address.
    #
    # params: 
    #   $1  = interface to query
    #   $2  = prefix, default is 'inet'
    #
    #
    
    type ifconfig >/dev/null 2>/dev/null && \
         ifconfig | grep $1 >/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
        ifconfig "$1" | grep "${2:-inet} " | awk '{ print $2 }' | head -n 1
    fi

}

vimhelp() {
    vim -c "help $@ | only"
}

# vim: set ft=sh :
#
# This file is designed to be sourced for its functions.
#
# It is assumed to be apart of ~/.sh/* framework and can be sourced accordingly.
#
# You should be able to comply with assert_sh_services_environment() before
# executing any of these functions.
#

ensure_path() {
    #
    # usage: ensure_path {path}
    #
    # Ensure that its argument is in path.
    #
    # options: 
    #   -p prepend.
    #   -a append (default).
    #
    local newpath what p
    case "$1" in
        -p|-a)
            what="$2"
            ;;
        -*)
            echo "error: unknown option: $1"
            ;;
        *)
            what="$1"
            ;;
    esac

    if [ "$1" = "-p" ]; then
        newpath="$what:$PATH"
    else
        newpath="$PATH:$what"
    fi

    # echo "$PATH" | grep -q "$what" || PATH="$newpath"
    #
    # we need to do sth like this, or we'll get confused by things like 'sw/sh'
    # if 'sw/sh.local is in PATH.
    #
    for p in `echo $PATH | sed -e 's/:/\n/g'`; do
        [ "$p" = "$what" ] && return
    done
    PATH="$newpath"
}

find_in_normpath() {
    #
    # Search in the usual paths for the indicated programs. If found print the
    # full path to the program to standard output.
    #
    # params: 
    #   $@  = a list of programs to search for
    #
    # exit status:
    #   0	= found
    #   >0	= not found
    #

    for _progname; do
        for _P in "${HOME}/sw/sh.local" "${HOME}/sw/sh" "${HOME}/sw/bin" \
                  "${HOME}/sw/sbin" \
                  /usr/local/bin /usr/local/sbin \
                  /usr/bin /usr/sbin \
                  /bin /sbin
        do
            _name="${_P}/${_progname}"
            if [ -x "$_name" ]; then
                echo "$_name"
                continue 2
            fi
        done
        # echo "not found: $_progname"
    done
    unset P name progname
    return 127
}

set_default_sh_services_environment() {
    #
    # Call for the side effect of setting a few vars to ~/.sh values.
    #

    MY_PROFILE_PATH="${HOME}/.sh"
    THIS_PROFILE="${MY_PROFILE_PATH}/this-profile"

    export MY_PROFILE_PATH THIS_PROFILE
    assert_sh_services_environment
}

maybe_set_default_sh_services_environment() {
    if ! check_sh_services_environment; then
        set_default_sh_services_environment
    fi
}

assert_sh_services_environment() {
    #
    # assert that the environment these functions need is exported
    #

    if ! check_sh_services_environment; then
        echo "sh services environment is missconfigured, abborting"
        exit 1
    fi
}

check_sh_services_environment() {
    #
    # check if the environment these functions need is exported
    # returns 0 if ok, > 0 if not ok
    #

    [ -z "$MY_PROFILE_PATH" ] && return 1
    [ -z "$THIS_PROFILE" ] && return 1
    return 0
}

services_d() {
    local w

    w="$MY_PROFILE_PATH/services.d/$1"
    shift 1
    if [ -x "${w}.`uname -n`" ]; then # use host-specific override if available
        w="${w}.`uname -n`"
    fi

	if [ -x "$w" ]; then
	    "$w" "$@"
	else
	    echo "no $1 profile to execute! ($w)"
	fi
}

make_profile_link() {
    local w

    w="${MY_PROFILE_PATH}/config.d/${1}.`echo_this_profile NETWORK_PROFILE`"
    if [ -f "$w" ]; then
        ln -sf "$w" "${HOME}/.$1"
        return 0
    else
        return 1
    fi
}

rm_profile_link() {
	if [ -L "${HOME}/.$1" ]; then
		unlink "${HOME}/.$1"
	fi
}

echo_network_profile() {
    #
    # Maps NETWORK_NAME's to NETWORK_PROFILE's and pritns NETWORK_PROFILE
    #
    case "$1" in
        "BSDNet")
            echo "home"
            ;;
        "wegnet")
            echo "work"
            ;;
        "engineering")
            echo "work"
            ;;
        *)
            echo "$1"
            ;;
    esac
}

echo_network_connection() {
    #
    # Displays the name of the network connection, e.g. Auto BSDNet.
    #

    local output

	# network specific stuff
	#
	if ! which nmcli > /dev/null; then
	    echo "no supported network tool found"
	    return 1
	fi

	while [ -z "$output" ]; do
	    # network specific issues
	    output="`nmcli -t -f NAME con status | head -n 1`"

        if [ -z "$output" ]; then # unknown or unconnected
		    sleep 5
        fi
	done

    echo "$output"
}

echo_this_profile() {
    #
    # extract info from the this-profile file.
    #
    # if no arguments: dump it sans comments.
    # for each argument (key), print the corrisonding value
    #

    local key

    if [ ! -r "$THIS_PROFILE" ]; then
        echo "unable to read $THIS_PROFILE" 1>&2
        return 127
    fi

    if [ $# -eq 0 ]; then
        cat "$THIS_PROFILE" | grep -v -E "^#"
        return 0;
    fi

    for key in $@; do
        grep -E "^${key}=" "$THIS_PROFILE"  | cut -d "=" -f 2- | tail -n 1
            #
            # force last entry (tail -n 1) to be returned, to *force* sanity.
            # there should never be duplicates unless the user dicked with it.
    done
}

write_this_profile() {
    local key value

    key="$1"
    value="$2"

    if [ -z "$key" ]; then
        echo "KEY should be a scalar word, not the empty string!"
        return 1
    fi

    # erase the key
    if [ -z "$value" ]; then
        ed -s "$THIS_PROFILE" >/dev/null <<EOF
    g/^${key}=/d
    w
    q
EOF
    fi

    # test if value already exists
    if [ -n "`echo_this_profile $key`" ]; then
        # and replace
        ed -s "$THIS_PROFILE" >/dev/null <<EOF
        #cat <<EOF
    $
    ?^${key}=?
    c
${key}=${value}
.
    w
    q
EOF
        return $?
    fi

    # else we can just append it.
    #
    # ed doesn't do locking so >> is just as safe \o/.
    #
    if [ -n "$value" ]; then
        echo "${key}=${value}" >> $THIS_PROFILE
    fi
}

get_ruby_version() {
    local p
    
    p="`find_in_normpath ruby`"
    [ -n "$p" ] && "$p" -v | cut -d ' ' -f 2
}

get_ruby_major_version() {
    get_ruby_version | cut -d '.' -f 1-2
}

get_python_version() {
    local p
    
    p="`find_in_normpath python`"
    # groan, python seems to use stderr here.
    [ -n "$p" ] && "$p" -V 2>&1 | cut -d ' ' -f 2
}

get_python_major_version() {
    get_python_version | cut -d '.' -f 1-2
}

get_power_state() {
    case "$OS_NAME" in
        Linux)
            ${OS_NAME}_get_power_state
            ;;
        *)
            echo "`basename $0`: unsupported platform: `uname -o` / OS_NAME=${OS_NAME}"
            return 127
            ;;
    esac
}

set_power_profile() {
    #
    # invokes ${MY_PROFILE_PATH}/power.d/{network profile}.{host name} with any
    # arguments given to us. The profile and arguments are recorded using
    # write_this_profile.
    #

    local hostname power_dir network_power_profile default_power_profile which_profile

    hostname="`uname -n`"
    power_dir="${MY_PROFILE_PATH}/power.d"
    network_power_profile="${power_dir}/`echo_this_profile  NETWORK_PROFILE`.$hostname"
    default_power_profile="${power_dir}/default.$hostname"

    if [ -x "$network_power_profile" ]; then
        which_profile="$network_power_profile"
    elif [ -x "$default_power_profile" ]; then
        which_profile="$default_power_profile"
    else
        echo "`basename $0`: no power profile available!" > /dev/stderr
        return 1
    fi

    "$which_profile" "$*" 
    write_this_profile POWER_PROFILE "`basename "$which_profile"` $*"
}



# Load OS specific library code
#
    if [ -n "$OS_NAME" ]; then
        . "${HOME}/.sh/lib.d/${OS_NAME}"
    fi


#
# Environment variables.
#

#
# default file permissions -rw------- / drwx------
#
# Setting this umask tends to cause problems in certain environments (like
# work), so move this to .sh/rc.local as desired!
#
#umask 077

#
# the system should provide a suitable PATH for what we need here, 
# avoid setting it here if we can, and let the rc.local worry later.
#
if [ -z "$PATH" ]; then
    PATH="/bin:/sbin:/usr/bin:/usr/sbin"; export PATH
fi

# prepend ~/sw/ directories to path
#
ensure_path -p "$HOME/sw/bin"
ensure_path -p "$HOME/sw/sbin"
ensure_path -p "$HOME/sw/sh"
ensure_path -p "$HOME/sw/sh.local"

# and ~/.local/bin for things from pip, etc.
ensure_path -p "$HOME/.local/bin"

# Common unix paths.
# Not every system includes 'sbin' in default user PATH.
#
ensure_path -e -a \
    /usr/local/bin /usr/bin /bin \
    /usr/local/sbin /usr/sbin /sbin

# Search path for manual pages.
export MANPATH

# Attempt to override default timezone; I prefer UTC
TZ='Etc/UTC'; export TZ

# prefer megabytes over 512 byte blocks.
BLOCKSIZE='M'; export BLOCKSIZE

# Set a variable to work like LD_LIBRARY_PATH. This is used by most systems I
# use (Linux, *BSD). Other systems should use ~/.sh/env.d/$OS_NAME to set the
# correct value from this variable and/or unset this one.
#
LD_LIBRARY_PATH="${HOME}/sw/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH


# Test for ssh to local host and assume a GUI is present. E.g. Chrome Secure Shell app.
# Unset in rc.local if needed!
#
if [ -z "$DISPLAY" ]; then
	if [ "`echo $SSH_CONNECTION | cut -f1 -d' '`" = "127.0.0.1" -a \
         "`echo $SSH_CONNECTION | cut -f3 -d' '`" = "127.0.0.1" ]; then
        DISPLAY=":0.0"
        export DISPLAY
	fi
fi

[ -f "${HOME}/.sh/env.d/`uname -s`.sh" ] && . "${HOME}/.sh/env.d/`uname -s`.sh"
. "${HOME}/.sh/env.d/pager.sh"
. "${HOME}/.sh/env.d/editor.sh"
. "${HOME}/.sh/env.d/java.sh"
. "${HOME}/.sh/env.d/ruby.sh"
. "${HOME}/.sh/env.d/python.sh"
. "${HOME}/.sh/env.d/irc.sh"

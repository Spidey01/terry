# vim: set ft=sh ai si ts=4 sw=4 et :
# $Id$
#
# My personal Bourne-style Shell resource configuration profile.
#
# This should be portable across virtually all Bourne shells and operating
# systems, as long as alias and functions are supported.
#
# portable environment data is sourced from ~/.sh_env
# portable functions are sourced from ~/.sh_funcs
# portable aliases are sourced from ~/.sh_aliases
#
# system specific environment data is sourced from ~/.sh_env.osname
# system specific functions are sourced from ~/.sh_funcs.osname
# system specific alias are sourced from ~/.sh_aliases.osname
#
# .site_shrc is sourced after everything else, to privide system local changes.
# For version control purposes .site_shrc is usually a symlink or a stub.
#


#
# set my standard environment, functions, and aliases
#
    . "${HOME}/.sh_funcs"
    . "${HOME}/.sh_env"     # depends on funcs
    . "${HOME}/.sh_aliases"

#
# Set a string of OS_* variables to the portable subset of uname outputs
#
    OS_ARCH=`uname -m`
    OS_NAME=`uname -s`
    OS_RELLVL=`uname -r`
    export OS_ARCH OS_NAME_OS_RELLVL
#
# Cache the current machines hostname. hostname -s is not portable enough for
# getting the short form of our current machines hostname, so do this instead
# of invoking hostname -s whenever needed. 
#
    HOSTNAME="`echo ${HOSTNAME:-\`uname -n\`} | sed 's/\..*//'`"
    export HOSTNAME

#
# set shell specific settings
#
    case `basename $SHELL` in
        'sh') 
            # older versions of the sh lack line editing (i.e. < sys 3)
            if [ "$OS_NAME" = FreeBSD -o "$OS_NAME" = OpenBSD -o \
                 "$OS_NAME" = NetBSD  -o "$OS_NAME" = Linux ]; then
                set -o emacs
            fi

            # sh doesn't support C-style directory stacks, emulate them
            DIRSTACK="$HOME"
            export DIRSTACK
            alias dirs=emulate_dirs
            alias popd=emulate_popd
            alias pushd=emulate_pushd

            ;; # sh
        'bash') 
            set bell-style none
            set -o emacs 
            set -o ignoreeof
            shopt -s checkwinsize

            # list possible-completions instead of ring bell
            bind 'set show-all-if-ambiguous on'

            # prompt is: [ user@host:pwd ]$
            PS1="[ \u@\h:\w ]$ "; export PS1

            # append to history file rather than overwrite
            shopt -s histappend

            HISTFILE="${HOME}/.bash_history"
            ;; # bash
        'ksh' | 'pdksh' | 'mksh' | 'ksh88' | 'ksh93')
            set -o emacs 
            set -o ignoreeof

            #
            # The various korn shells handle escape codes in prompts 
            # rather differently from one another. This method appears
            # to work on all ksh implementations and plays nicely with
            # VT102 emulators like rxvt perfectly fine.
            #
            # Special thanks to Scotto for this technique.
            #
            PS1='${USER}@[1;37m${HOSTNAME}[0;36m$[0;0m '

            # As used by the classic  korn shell
            HISTFILE="${HOME}/.sh_history"

            #
            # Check if we're using a public domain ksh, which supports the 
            # nifty 'bind' command, plus an extended command set
            #
            echo $KSH_VERSION | egrep 'MIRBSD|PD KSH' >/dev/null
            if [ $? -eq 0 ]; then 
                # assume we have a pd-style korn

                #
                # make sure tab completion works (where possible)
                # XXX do not use complete-{command,file} - they break it!
                #
                bind "^I=complete"
                # needed to display the completion list, where applicable.
                bind "^I=complete-list"
            else
                # assume we have a real korn

                #
                # define a function (keybind) that we can use to map keys.
                # this will only work on Korn Shell 1993 & up
                #
                typeset -A Keytable
                trap 'eval "${Keytable[${.sh.edchar}]}"' KEYBD
                keybind() { # key [action]
                    typeset key=$(print -f "%q" "$2")
                    case $# in
                        2) Keytable[$1]=' .sh.edchar=${.sh.edmode}'"$key" ;;
                        1) unset Keytable[$1] ;;
                        *) print -u2 "Usage: $0 key [action]"
                           return 2;; # usage errors return 2 by default
                    esac

                }
                # allow one <tab> to do completion work.
                #keybind $'\t' $'\E\E' #<-- use this if shell uses <esc><esc>
                keybind $'\t' $'\t\t'  #<-- use this if shell uses <tab><tab>

                # clear the screen on ^L    (control char)
                # rather then just reprinting the prompt.
                keybind  $'clear\n'
            fi

            # ksh doesn't support C-style directory stacks, emulate them
            DIRSTACK="$HOME"
            export DIRSTACK
            alias dirs=emulate_dirs
            alias popd=emulate_popd
            alias pushd=emulate_pushd

            ;; # ksh family
        'zsh') # set my various options
            HISTFILE="${HOME}/.histfile"
            HISTSIZE=768
            SAVEHIST=512
            setopt appendhistory autocd extendedglob 
            setopt incappendhistory
            # dont' beep !
            unsetopt beep
            # emacs bindings
            bindkey -e
            # use vi ^W behaviour rather then emacs mode default
            bindkey "^W" vi-backward-kill-word
            zstyle :compinstall filename "$HOME/.zshrc"
            autoload -Uz compinit
            compinit
            # I like color in my zsh prompt ;-)
            fg_no_colour=$'%{\e[0m%}'
            fg_green=$'%{\e[0;32m%}'
            PS1="${USER}@%B%m%b${fg_green}$ ${fg_no_colour}"; export PS1
            # display the (24h) time in the right-prompt`
            RPS1="%T"; export RPS1
    esac


#
# parse platform specific environment, functions, and aliases
#
    [ -f "${HOME}/.sh_env.${OS_NAME}" ]     && . "${HOME}/.sh_env.${OS_NAME}"
    [ -f "${HOME}/.sh_funcs.${OS_NAME}" ]   && . "${HOME}/.sh_funcs.${OS_NAME}"
    [ -f "${HOME}/.sh_aliases.${OS_NAME}" ] && . "${HOME}/.sh_aliases.${OS_NAME}"

#
# give a few fortune cookie and the current date/time on login
#
    [ -x /usr/games/fortune ] && /usr/games/fortune -aes
    echo ''; echo ''
    echo "To days date is: `date`"

#
# parse site local additions
#
    [ -f "${HOME}/.site_shrc" ] && . "${HOME}/.site_shrc"

